{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","main","temp","sys","weather","stop","this","components_Titles","components_Form","components_Weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8d533091.chunk.js","sourcesContent":["//import \nimport React from \"react\";\n\nconst Titles = () => (\n\t<div>\n\t\t<h1 className=\"title-container__title\">Weather Finder</h1>\n\t\t<p className=\"title-container__subtitle\">Find out temperature, conditions, and more...</p>\n\t</div>\n);\n\nexport default Titles;","import React from \"react\";\n\nconst Form = props => (\n\t<form onSubmit = {props.getWeather}>\n\t\t<input type = \"text\" name = \"city\" placeholder = \"Enter your city\"/>\n\t\t<input type = \"text\" name = \"country\" placeholder = \"Enter your country\"/>\n\t\t<button>Get Weather</button>\n\t</form>\n);\n\nexport default Form","import React from \"react\";\n\nconst Weather = props => (\n\t<div className = \"weather__info\">\n\t\t{ \n\t\t\tprops.city && props.country &&  <p className = \"weather__key\">Location: \n\t\t\t\t<span className = \"weather__value\"> { props.city }, { props.country }</span>\n\t\t\t</p>\n\t\t}\n\n\t\t{ \n\t\t\tprops.temperature && <p className = \"weather__key\">Temperature: \n\t\t\t\t<span className = \"weather__value\"> { props.temperature }</span>\n\t\t\t</p>\n\t\t}\n\n\t\t{ \n\t\t\tprops.humidity && <p className = \"weather__key\">Humidity: \n\t\t\t\t<span className = \"weather__value\"> { props.humidity }</span>\n\t\t\t</p>\n\t\t}\n\n\t\t{ \n\t\t\tprops.description && <p className = \"weather__key\">Conditions: \n\t\t\t\t<span className = \"weather__value\"> { props.description }</span>\n\t\t\t</p>\n\t\t}\n\n\t\t{ \n\t\t\tprops.error && <p className = \"weather__error\">{ props.error }</p>\n\t\t}\n\t</div>\n);\n\nexport default Weather\n\n\n\n\n\n","//main file that you will be working with\n\nimport React from \"react\";\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\nconst API_KEY = \"52e67ae6f5e0eb6b531b853a4a03b6a3\";\n\n//component that contains all the other components\nclass App extends React.Component {\n  state = {\n    //initial states, states change once the button is pressed\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&mode=json&appid=${API_KEY}&units=imperial`);\n    const data = await api_call.json();\n    if (city && country) {\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: \"\"\n    });\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please enter your location.\"\n      });\n    }\n  }\n  //render is used to display data\n  render() {\n    return (\n      //anything you want to return has to be in one single div\n      //<titles /> is used to add the title component\n      //passing the props to be used in Weather.js\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n                  <Titles />\n                </div>\n                <div className=\"col-xs-7 form-container\">\n                  <Form getWeather = {this.getWeather}/>\n                  <Weather \n                    temperature = {this.state.temperature}\n                    city = {this.state.city}\n                    country = {this.state.country}\n                    humidity = {this.state.humidity}\n                    description = {this.state.description}\n                    error = {this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport \"./App.css\"\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}